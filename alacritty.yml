# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

window:
  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 80
    lines: 24

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 2
    y: 2

  # Window decorations
  # Setting this to false will result in window without borders and title bar.
  decorations: true

# Display tabs using this many cells (changes require restart)
tabspaces: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: SF Mono
    style: Regular

  # The bold font face
  bold:
    family: SF Mono
    style: Bold

  # The italic font face
  italic:
    family: SF Mono
    style: Regular Italic

  # Point size of the font
  size: 11.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 1
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Should display the render timer
render_timer: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
custom_cursor_colors: false

# Colors (Gruvbox dark)
colors:
  # Default colors
  primary:
    # hard contrast: background = '0x1d2021'
    background: '0x282828'
    # soft contrast: background = '0x32302f'
    foreground: '0xebdbb2'

  # Normal colors
  normal:
    black:   '0x282828'
    red:     '0xcc241d'
    green:   '0x98971a'
    yellow:  '0xd79921'
    blue:    '0x458588'
    magenta: '0xb16286'
    cyan:    '0x689d6a'
    white:   '0xa89984'

  # Bright colors
  bright:
    black:   '0x928374'
    red:     '0xfb4934'
    green:   '0xb8bb26'
    yellow:  '0xfabd2f'
    blue:    '0x83a598'
    magenta: '0xd3869b'
    cyan:    '0x8ec07c'
    white:   '0xebdbb2'

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
background_opacity: 1.0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # Faux Scrollback
  #
  # The `faux_scrollback_lines` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_scrollback_lines` to 0.
  faux_scrollback_lines: 1

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

dynamic_title: true

hide_cursor_when_typing: false

# Style of the cursor
#
# Values for 'cursor_style':
# - Block
# - Underline
# - Beam
cursor_style: Block

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
shell:
  program: /bin/bash
  args:
    - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[H",   mode: ~AppCursor  }
  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[F",   mode: ~AppCursor  }
  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~"                     }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: F1,       mods: Shift,   chars: "\x1b[1;2P"                   }
  - { key: F2,       mods: Shift,   chars: "\x1b[1;2Q"                   }
  - { key: F3,       mods: Shift,   chars: "\x1b[1;2R"                   }
  - { key: F4,       mods: Shift,   chars: "\x1b[1;2S"                   }
  - { key: F5,       mods: Shift,   chars: "\x1b[15;2~"                  }
  - { key: F6,       mods: Shift,   chars: "\x1b[17;2~"                  }
  - { key: F7,       mods: Shift,   chars: "\x1b[18;2~"                  }
  - { key: F8,       mods: Shift,   chars: "\x1b[19;2~"                  }
  - { key: F9,       mods: Shift,   chars: "\x1b[20;2~"                  }
  - { key: F10,      mods: Shift,   chars: "\x1b[21;2~"                  }
  - { key: F11,      mods: Shift,   chars: "\x1b[23;2~"                  }
  - { key: F12,      mods: Shift,   chars: "\x1b[24;2~"                  }
  - { key: F1,       mods: Control, chars: "\x1b[1;5P"                   }
  - { key: F2,       mods: Control, chars: "\x1b[1;5Q"                   }
  - { key: F3,       mods: Control, chars: "\x1b[1;5R"                   }
  - { key: F4,       mods: Control, chars: "\x1b[1;5S"                   }
  - { key: F5,       mods: Control, chars: "\x1b[15;5~"                  }
  - { key: F6,       mods: Control, chars: "\x1b[17;5~"                  }
  - { key: F7,       mods: Control, chars: "\x1b[18;5~"                  }
  - { key: F8,       mods: Control, chars: "\x1b[19;5~"                  }
  - { key: F9,       mods: Control, chars: "\x1b[20;5~"                  }
  - { key: F10,      mods: Control, chars: "\x1b[21;5~"                  }
  - { key: F11,      mods: Control, chars: "\x1b[23;5~"                  }
  - { key: F12,      mods: Control, chars: "\x1b[24;5~"                  }
  - { key: F1,       mods: Alt,     chars: "\x1b[1;6P"                   }
  - { key: F2,       mods: Alt,     chars: "\x1b[1;6Q"                   }
  - { key: F3,       mods: Alt,     chars: "\x1b[1;6R"                   }
  - { key: F4,       mods: Alt,     chars: "\x1b[1;6S"                   }
  - { key: F5,       mods: Alt,     chars: "\x1b[15;6~"                  }
  - { key: F6,       mods: Alt,     chars: "\x1b[17;6~"                  }
  - { key: F7,       mods: Alt,     chars: "\x1b[18;6~"                  }
  - { key: F8,       mods: Alt,     chars: "\x1b[19;6~"                  }
  - { key: F9,       mods: Alt,     chars: "\x1b[20;6~"                  }
  - { key: F10,      mods: Alt,     chars: "\x1b[21;6~"                  }
  - { key: F11,      mods: Alt,     chars: "\x1b[23;6~"                  }
  - { key: F12,      mods: Alt,     chars: "\x1b[24;6~"                  }
  - { key: F1,       mods: Command, chars: "\x1b[1;3P"                   }
  - { key: F2,       mods: Command, chars: "\x1b[1;3Q"                   }
  - { key: F3,       mods: Command, chars: "\x1b[1;3R"                   }
  - { key: F4,       mods: Command, chars: "\x1b[1;3S"                   }
  - { key: F5,       mods: Command, chars: "\x1b[15;3~"                  }
  - { key: F6,       mods: Command, chars: "\x1b[17;3~"                  }
  - { key: F7,       mods: Command, chars: "\x1b[18;3~"                  }
  - { key: F8,       mods: Command, chars: "\x1b[19;3~"                  }
  - { key: F9,       mods: Command, chars: "\x1b[20;3~"                  }
  - { key: F10,      mods: Command, chars: "\x1b[21;3~"                  }
  - { key: F11,      mods: Command, chars: "\x1b[23;3~"                  }
  - { key: F12,      mods: Command, chars: "\x1b[24;3~"                  }
  - { key: A,         mods: Alt,       chars: "\x1ba"                       }
  - { key: B,         mods: Alt,       chars: "\x1bb"                       }
  - { key: C,         mods: Alt,       chars: "\x1bc"                       }
  - { key: D,         mods: Alt,       chars: "\x1bd"                       }
  - { key: E,         mods: Alt,       chars: "\x1be"                       }
  - { key: F,         mods: Alt,       chars: "\x1bf"                       }
  - { key: G,         mods: Alt,       chars: "\x1bg"                       }
  - { key: H,         mods: Alt,       chars: "\x1bh"                       }
  - { key: I,         mods: Alt,       chars: "\x1bi"                       }
  - { key: J,         mods: Alt,       chars: "\x1bj"                       }
  - { key: K,         mods: Alt,       chars: "\x1bk"                       }
  - { key: L,         mods: Alt,       chars: "\x1bl"                       }
  - { key: M,         mods: Alt,       chars: "\x1bm"                       }
  - { key: N,         mods: Alt,       chars: "\x1bn"                       }
  - { key: O,         mods: Alt,       chars: "\x1bo"                       }
  - { key: P,         mods: Alt,       chars: "\x1bp"                       }
  - { key: Q,         mods: Alt,       chars: "\x1bq"                       }
  - { key: R,         mods: Alt,       chars: "\x1br"                       }
  - { key: S,         mods: Alt,       chars: "\x1bs"                       }
  - { key: T,         mods: Alt,       chars: "\x1bt"                       }
  - { key: U,         mods: Alt,       chars: "\x1bu"                       }
  - { key: V,         mods: Alt,       chars: "\x1bv"                       }
  - { key: W,         mods: Alt,       chars: "\x1bw"                       }
  - { key: X,         mods: Alt,       chars: "\x1bx"                       }
  - { key: Y,         mods: Alt,       chars: "\x1by"                       }
  - { key: Z,         mods: Alt,       chars: "\x1bz"                       }
  - { key: A,         mods: Alt|Shift, chars: "\x1bA"                       }
  - { key: B,         mods: Alt|Shift, chars: "\x1bB"                       }
  - { key: C,         mods: Alt|Shift, chars: "\x1bC"                       }
  - { key: D,         mods: Alt|Shift, chars: "\x1bD"                       }
  - { key: E,         mods: Alt|Shift, chars: "\x1bE"                       }
  - { key: F,         mods: Alt|Shift, chars: "\x1bF"                       }
  - { key: G,         mods: Alt|Shift, chars: "\x1bG"                       }
  - { key: H,         mods: Alt|Shift, chars: "\x1bH"                       }
  - { key: I,         mods: Alt|Shift, chars: "\x1bI"                       }
  - { key: J,         mods: Alt|Shift, chars: "\x1bJ"                       }
  - { key: K,         mods: Alt|Shift, chars: "\x1bK"                       }
  - { key: L,         mods: Alt|Shift, chars: "\x1bL"                       }
  - { key: M,         mods: Alt|Shift, chars: "\x1bM"                       }
  - { key: N,         mods: Alt|Shift, chars: "\x1bN"                       }
  - { key: O,         mods: Alt|Shift, chars: "\x1bO"                       }
  - { key: P,         mods: Alt|Shift, chars: "\x1bP"                       }
  - { key: Q,         mods: Alt|Shift, chars: "\x1bQ"                       }
  - { key: R,         mods: Alt|Shift, chars: "\x1bR"                       }
  - { key: S,         mods: Alt|Shift, chars: "\x1bS"                       }
  - { key: T,         mods: Alt|Shift, chars: "\x1bT"                       }
  - { key: U,         mods: Alt|Shift, chars: "\x1bU"                       }
  - { key: V,         mods: Alt|Shift, chars: "\x1bV"                       }
  - { key: W,         mods: Alt|Shift, chars: "\x1bW"                       }
  - { key: X,         mods: Alt|Shift, chars: "\x1bX"                       }
  - { key: Y,         mods: Alt|Shift, chars: "\x1bY"                       }
  - { key: Z,         mods: Alt|Shift, chars: "\x1bZ"                       }
  - { key: Backslash, mods: Alt,       chars: "\x1b\\"                      } # Alt + \
  - { key: Backslash, mods: Alt|Shift, chars: "\x1b|"                       } # Alt + |
  - { key: Comma,     mods: Alt,       chars: "\x1b,"                       } # Alt + ,
  - { key: Comma,     mods: Alt|Shift, chars: "\x1b<"                       } # Alt + <
  - { key: Grave,     mods: Alt,       chars: "\x1b`"                       } # Alt + `
  - { key: Grave,     mods: Alt|Shift, chars: "\x1b~"                       } # Alt + ~
  - { key: Key0,      mods: Alt,       chars: "\x1b0"                       }
  - { key: Key0,      mods: Alt|Shift, chars: "\x1b)"                       }
  - { key: Key1,      mods: Alt,       chars: "\x1b1"                       }
  - { key: Key1,      mods: Alt|Shift, chars: "\x1b!"                       }
  - { key: Key2,      mods: Alt,       chars: "\x1b2"                       }
  - { key: Key2,      mods: Alt|Shift, chars: "\x1b@"                       }
  - { key: Key3,      mods: Alt,       chars: "\x1b3"                       }
  - { key: Key3,      mods: Alt|Shift, chars: "\x1b#"                       } # Alt + #
  - { key: Key4,      mods: Alt,       chars: "\x1b4"                       }
  - { key: Key4,      mods: Alt|Shift, chars: "\x1b$"                       }
  - { key: Key5,      mods: Alt,       chars: "\x1b5"                       }
  - { key: Key5,      mods: Alt|Shift, chars: "\x1b%"                       } # Alt + %
  - { key: Key6,      mods: Alt,       chars: "\x1b6"                       }
  - { key: Key6,      mods: Alt|Shift, chars: "\x1b^"                       } # Alt + ^
  - { key: Key7,      mods: Alt,       chars: "\x1b7"                       }
  - { key: Key7,      mods: Alt|Shift, chars: "\x1b&"                       }
  - { key: Key8,      mods: Alt,       chars: "\x1b8"                       }
  - { key: Key8,      mods: Alt|Shift, chars: "\x1b*"                       } # Alt + *
  - { key: Key9,      mods: Alt,       chars: "\x1b9"                       }
  - { key: Key9,      mods: Alt|Shift, chars: "\x1b("                       }
  - { key: Minus,     mods: Alt,       chars: "\x1b-"                       } # Alt + -
  - { key: Minus,     mods: Alt|Shift, chars: "\x1b_"                       } # Alt + _
  - { key: Period,    mods: Alt,       chars: "\x1b."                       } # Alt + .
  - { key: Period,    mods: Alt|Shift, chars: "\x1b>"                       } # Alt + >
  - { key: Semicolon, mods: Alt,       chars: "\x1b;"                       } # Alt + ;
  - { key: Semicolon, mods: Alt|Shift, chars: "\x1b:"                       } # Alt + :
  - { key: Slash,     mods: Alt,       chars: "\x1b/"                       } # Alt + /
  - { key: Slash,     mods: Alt|Shift, chars: "\x1b?"                       } # Alt + ?
  - { key: A,         mods: Command,       chars: "\x18@sa"                       }
  - { key: B,         mods: Command,       chars: "\x18@sb"                       }
  - { key: C,         mods: Command,       chars: "\x18@sc"                       }
  - { key: D,         mods: Command,       chars: "\x18@sd"                       }
  - { key: E,         mods: Command,       chars: "\x18@se"                       }
  - { key: F,         mods: Command,       chars: "\x18@sf"                       }
  - { key: G,         mods: Command,       chars: "\x18@sg"                       }
  - { key: H,         mods: Command,       chars: "\x18@sh"                       }
  - { key: I,         mods: Command,       chars: "\x18@si"                       }
  - { key: J,         mods: Command,       chars: "\x18@sj"                       }
  - { key: K,         mods: Command,       chars: "\x18@sk"                       }
  - { key: L,         mods: Command,       chars: "\x18@sl"                       }
  - { key: M,         mods: Command,       chars: "\x18@sm"                       }
  - { key: N,         mods: Command,       chars: "\x18@sn"                       }
  - { key: O,         mods: Command,       chars: "\x18@so"                       }
  - { key: P,         mods: Command,       chars: "\x18@sp"                       }
  - { key: Q,         mods: Command,       chars: "\x18@sq"                       }
  - { key: R,         mods: Command,       chars: "\x18@sr"                       }
  - { key: S,         mods: Command,       chars: "\x18@ss"                       }
  - { key: T,         mods: Command,       chars: "\x18@st"                       }
  - { key: U,         mods: Command,       chars: "\x18@su"                       }
  - { key: V,         mods: Command,       chars: "\x18@sv"                       }
  - { key: W,         mods: Command,       chars: "\x18@sw"                       }
  - { key: X,         mods: Command,       chars: "\x18@sx"                       }
  - { key: Y,         mods: Command,       chars: "\x18@sy"                       }
  - { key: Z,         mods: Command,       chars: "\x18@sz"                       }
  - { key: A,         mods: Command|Shift, chars: "\x18@sA"                       }
  - { key: B,         mods: Command|Shift, chars: "\x18@sB"                       }
  - { key: C,         mods: Command|Shift, chars: "\x18@sC"                       }
  - { key: D,         mods: Command|Shift, chars: "\x18@sD"                       }
  - { key: E,         mods: Command|Shift, chars: "\x18@sE"                       }
  - { key: F,         mods: Command|Shift, chars: "\x18@sF"                       }
  - { key: G,         mods: Command|Shift, chars: "\x18@sG"                       }
  - { key: H,         mods: Command|Shift, chars: "\x18@sH"                       }
  - { key: I,         mods: Command|Shift, chars: "\x18@sI"                       }
  - { key: J,         mods: Command|Shift, chars: "\x18@sJ"                       }
  - { key: K,         mods: Command|Shift, chars: "\x18@sK"                       }
  - { key: L,         mods: Command|Shift, chars: "\x18@sL"                       }
  - { key: M,         mods: Command|Shift, chars: "\x18@sM"                       }
  - { key: N,         mods: Command|Shift, chars: "\x18@sN"                       }
  - { key: O,         mods: Command|Shift, chars: "\x18@sO"                       }
  - { key: P,         mods: Command|Shift, chars: "\x18@sP"                       }
  - { key: Q,         mods: Command|Shift, chars: "\x18@sQ"                       }
  - { key: R,         mods: Command|Shift, chars: "\x18@sR"                       }
  - { key: S,         mods: Command|Shift, chars: "\x18@sS"                       }
  - { key: T,         mods: Command|Shift, chars: "\x18@sT"                       }
  - { key: U,         mods: Command|Shift, chars: "\x18@sU"                       }
  - { key: V,         mods: Command|Shift, chars: "\x18@sV"                       }
  - { key: W,         mods: Command|Shift, chars: "\x18@sW"                       }
  - { key: X,         mods: Command|Shift, chars: "\x18@sX"                       }
  - { key: Y,         mods: Command|Shift, chars: "\x18@sY"                       }
  - { key: Z,         mods: Command|Shift, chars: "\x18@sZ"                       }
  - { key: Backslash, mods: Command,       chars: "\x18@s\\"                      } # Command + \
  - { key: Backslash, mods: Command|Shift, chars: "\x18@s|"                       } # Command + |
  - { key: Comma,     mods: Command,       chars: "\x18@s,"                       } # Command + ,
  - { key: Comma,     mods: Command|Shift, chars: "\x18@s<"                       } # Command + <
  - { key: Grave,     mods: Command,       chars: "\x18@s`"                       } # Command + `
  - { key: Grave,     mods: Command|Shift, chars: "\x18@s~"                       } # Command + ~
  - { key: Key0,      mods: Command,       chars: "\x18@s0"                       }
  - { key: Key0,      mods: Command|Shift, chars: "\x18@s)"                       }
  - { key: Key1,      mods: Command,       chars: "\x18@s1"                       }
  - { key: Key1,      mods: Command|Shift, chars: "\x18@s!"                       }
  - { key: Key2,      mods: Command,       chars: "\x18@s2"                       }
  - { key: Key2,      mods: Command|Shift, chars: "\x18@s@"                       }
  - { key: Key3,      mods: Command,       chars: "\x18@s3"                       }
  - { key: Key3,      mods: Command|Shift, chars: "\x18@s#"                       } # Command + #
  - { key: Key4,      mods: Command,       chars: "\x18@s4"                       }
  - { key: Key4,      mods: Command|Shift, chars: "\x18@s$"                       }
  - { key: Key5,      mods: Command,       chars: "\x18@s5"                       }
  - { key: Key5,      mods: Command|Shift, chars: "\x18@s%"                       } # Command + %
  - { key: Key6,      mods: Command,       chars: "\x18@s6"                       }
  - { key: Key6,      mods: Command|Shift, chars: "\x18@s^"                       } # Command + ^
  - { key: Key7,      mods: Command,       chars: "\x18@s7"                       }
  - { key: Key7,      mods: Command|Shift, chars: "\x18@s&"                       }
  - { key: Key8,      mods: Command,       chars: "\x18@s8"                       }
  - { key: Key8,      mods: Command|Shift, chars: "\x18@s*"                       } # Command + *
  - { key: Key9,      mods: Command,       chars: "\x18@s9"                       }
  - { key: Key9,      mods: Command|Shift, chars: "\x18@s("                       }
  - { key: Minus,     mods: Command,       chars: "\x18@s-"                       } # Command + -
  - { key: Minus,     mods: Command|Shift, chars: "\x18@s_"                       } # Command + _
  - { key: Period,    mods: Command,       chars: "\x18@s."                       } # Command + .
  - { key: Period,    mods: Command|Shift, chars: "\x18@s>"                       } # Command + >
  - { key: Semicolon, mods: Command,       chars: "\x18@s;"                       } # Command + ;
  - { key: Semicolon, mods: Command|Shift, chars: "\x18@s:"                       } # Command + :
  - { key: Slash,     mods: Command,       chars: "\x18@s/"                       } # Command + /
  - { key: Slash,     mods: Command|Shift, chars: "\x18@s?"                       } # Command + ?
  - { key: LBracket,  mods: Command,       chars: "\x18@s["                       } # Command + [
  - { key: RBracket,  mods: Command,       chars: "\x18@s]"                       } # Command + ]
  - { key: Space,     mods: Control,       chars: "\x00"                          }
  - { key: Slash,     mods: Control,       chars: "\x1f"                          }
  # - { key: chars: "\x00"  ^@                                                    }
  - { key: A,         mods: Control,       chars: "\x01"                          }
  - { key: B,         mods: Control,       chars: "\x02"                          }
  - { key: C,         mods: Control,       chars: "\x03"                          }
  - { key: D,         mods: Control,       chars: "\x04"                          }
  - { key: E,         mods: Control,       chars: "\x05"                          }
  - { key: F,         mods: Control,       chars: "\x06"                          }
  - { key: G,         mods: Control,       chars: "\x07"                          }
  - { key: H,         mods: Control,       chars: "\x08"                          }
  - { key: I,         mods: Control,       chars: "\x09"                          }
  - { key: J,         mods: Control,       chars: "\x0A"                          }
  - { key: K,         mods: Control,       chars: "\x0B"                          }
  - { key: L,         mods: Control,       chars: "\x0C"                          }
  - { key: M,         mods: Control,       chars: "\x0D"                          }
  - { key: N,         mods: Control,       chars: "\x0E"                          }
  - { key: O,         mods: Control,       chars: "\x0F"                          }
  - { key: P,         mods: Control,       chars: "\x10"                          }
  - { key: Q,         mods: Control,       chars: "\x11"                          }
  - { key: R,         mods: Control,       chars: "\x12"                          }
  - { key: S,         mods: Control,       chars: "\x13"                          }
  - { key: T,         mods: Control,       chars: "\x14"                          }
  - { key: U,         mods: Control,       chars: "\x15"                          }
  - { key: V,         mods: Control,       chars: "\x16"                          }
  - { key: W,         mods: Control,       chars: "\x17"                          }
  - { key: X,         mods: Control,       chars: "\x18"                          }
  - { key: Y,         mods: Control,       chars: "\x19"                          }
  - { key: Z,         mods: Control,       chars: "\x1A"                          }
  # - { key: chars: "\x1B"  ^[                                                    }
  # - { key: chars: "\x1C"  ^\                                                    }
  # - { key: chars: "\x1D"  ^]                                                    }
  # - { key: chars: "\x1E"  ^^                                                    }
  # - { key: chars: "\x1F"  ^_                                                    }
  # - { key:  chars: "\x7F" ^?                                                    }
