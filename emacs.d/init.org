#+TITLE: Emacs configuration file
#+AUTHOR: Matthew Jones
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About

   My emacs config, heavily inspired / forked from [[https://github.com/larstvei/dot-emacs]].

* Configurations
** Meta

   All changes to the configuration should be done in =init.org=, *not* in
   =init.el=. Any changes in the =init.el= will be overwritten by saving
   =init.org=. The =init.el= in this repo should not be tracked by git, and
   is replaced the first time Emacs is started (assuming it has been renamed
   to =~/.emacs.d=).

   Emacs can't load =.org=-files directly, but =org-mode= provides functions
   to extract the code blocks and write them to a file. There are multiple
   ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
   could just use =org-babel-load-file=, but I had problems with
   byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
   but the git commits got a little messy. So here is a new approach.

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; This file replaces itself with the actual configuration at first run.

   ;; We can't tangle without org!
   (require 'org)
   ;; Open the configuration
   (find-file (concat user-emacs-directory "init.org"))
   ;; tangle it
   (org-babel-tangle)
   ;; load it
   (load-file (concat user-emacs-directory "init.el"))
   ;; finally byte-compile it
   (byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:

   #+BEGIN_SRC sh :tangle no
   git update-index --assume-unchanged init.el
   #+END_SRC

   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:

   #+BEGIN_SRC sh :tangle no
   git update-index --no-assume-unchanged init.el
   #+END_SRC

   I want lexical scoping for the init-file, which can be specified in the
   header. The first line of the configuration is as follows:

   #+BEGIN_SRC emacs-lisp
   ;;; -*- lexical-binding: t -*-
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp
   (defun tangle-init ()
     "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
     (when (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
       ;; Avoid running hooks when tangling.
       (let ((prog-mode-hook nil))
         (org-babel-tangle)
         (byte-compile-file (concat user-emacs-directory "init.el")))))

   (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC

   I'd like to keep a few settings private, so we load a =private.el= if it
   exists after the init-file has loaded.

   #+BEGIN_SRC emacs-lisp
   (add-hook
    'after-init-hook
    (lambda ()
      (let ((private-file (concat user-emacs-directory "private.el")))
        (when (file-exists-p private-file)
          (load-file private-file)))))
   #+END_SRC

* Garbage collector tweaks
** Init-time

  #+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
  (add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
  #+END_SRC

** Minibuffer

  #+BEGIN_SRC emacs-lisp
  (add-hook 'minibuffer-setup-hook (lambda () (setq gc-cons-threshold most-positive-fixnum)))
  (add-hook 'minibuffer-exit-hook (lambda () (setq gc-cons-threshold 800000)))
  #+END_SRC

* straight.el
** Cache SSL lookups

   #+BEGIN_SRC emacs-lisp
   (customize-set-variable 'nsm-settings-file (concat user-emacs-directory "network-security.data"))
   #+END_SRC

** Bootstrap straight.el

   #+BEGIN_SRC emacs-lisp
   ;; disable the GNU ELPA
   (setq package-archives nil)
   ;; initialize the package system
   (package-initialize)

   (defvar bootstrap-version)
   (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 5))
     (unless (file-exists-p bootstrap-file)
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
         (goto-char (point-max))
         (eval-print-last-sexp)))
     (load bootstrap-file nil 'nomessage))

   (straight-use-package 'use-package)
   #+END_SRC

* Niceities
** File I/O

   #+BEGIN_SRC emacs-lisp
   (set-language-environment "UTF-8")
   (set-default-coding-systems 'utf-8)

   (setq load-prefer-newer t
         save-place-file (concat user-emacs-directory "places")
         backup-directory-alist `(("." . ,(concat user-emacs-directory "backups"))))
	 auto-revert-interval 1            ; Refresh buffers fast
         recentf-max-saved-items 100       ; Show more recent files
         sentence-end-double-space nil)    ; No double space
   #+END_SRC

** Disable custom

   #+BEGIN_SRC emacs-lisp
   (setq custom-file (make-temp-file ""))   ; Discard customization's
   #+END_SRC

** Load environment variables

   #+BEGIN_SRC emacs-lisp
   (when window-system
     (let ((path-from-shell (shell-command-to-string "/bin/bash -l -c 'echo $PATH'")))
       (setenv "PATH" path-from-shell)
       (setq exec-path (split-string path-from-shell path-separator))))
   #+END_SRC
** Elisp helpers
#+BEGIN_SRC emacs-lisp
;; functional helpers
(use-package dash
  :straight t)

;; string manipulation
(use-package s
  :straight t)

;; filepath manipulation
(use-package f
  :straight t)
#+END_SRC

* UI Appearance
** UI Interaction

   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   (setq apropos-do-all t
         echo-keystrokes 0.1               ; Show keystrokes asap
         inhibit-startup-message t         ; No splash screen please
         initial-scratch-message nil)      ; Clean scratch buffer
   #+END_SRC

** Bell

   #+BEGIN_SRC emacs-lisp
   (setq visible-bell t
         ring-bell-function
         (lambda ()
           (let ((orig-fg (face-foreground 'mode-line)))
             (set-face-foreground 'mode-line "#F2804F")
             (run-with-idle-timer 0.1 nil
                                  (lambda (fg) (set-face-foreground 'mode-line fg))
                                  orig-fg)))
         inhibit-startup-echo-area-message t)
   #+END_SRC

** Cursor

   #+BEGIN_SRC emacs-lisp
   (setq cursor-type 'hbar)
   (blink-cursor-mode 0)
   #+END_SRC

** Minimal UI

   #+BEGIN_SRC emacs-lisp
   (if (boundp 'toggle-frame-fullscreen) (toggle-frame-fullscreen))
   (if (boundp 'scroll-bar-mode) (scroll-bar-mode 0))
   (if (boundp 'tool-bar-mode) (tool-bar-mode 0))
   (if (boundp 'menu-bar-mode) (menu-bar-mode 0))
   #+END_SRC


** Gotham theme
#+BEGIN_SRC emacs-lisp
(use-package gotham-theme
  :straight t
  :config
  (customize-set-variable 'gotham-tty-256-colors t)
  (load-theme 'gotham t))
#+END_SRC
** Fira Code Retina font
#+BEGIN_SRC emacs-lisp
(when (window-system)
  (progn
    ;; (set-default-font "Fira Code Retina-11")
    (set-face-attribute 'default nil
                    :family "Fira Code Retina"
                    :height 110
                    :weight 'normal
                    :width 'normal)

    (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
                   (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
                   (36 . ".\\(?:>\\)")
                   (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
                   (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
                   (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
                   (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
                   (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
                   (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
                   (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
                   (48 . ".\\(?:x[a-zA-Z]\\)")
                   (58 . ".\\(?:::\\|[:=]\\)")
                   (59 . ".\\(?:;;\\|;\\)")
                   (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
                   (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
                   (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
                   (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
                   (91 . ".\\(?:]\\)")
                   (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
                   (94 . ".\\(?:=\\)")
                   (119 . ".\\(?:ww\\)")
                   (123 . ".\\(?:-\\)")
                   (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
                   (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
                   )
                 ))
      (dolist (char-regexp alist)
        (set-char-table-range composition-function-table (car char-regexp)
                              `([,(cdr char-regexp) 0 font-shape-gstring]))))))
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)

;; Set positon to 'line:column'
(setq mode-line-position '((line-number-mode ("%l" (column-number-mode ":%c")))))


(defun simple-mode-line-render (left right)
  "Return a string of `window-width' length containing LEFT aligned respectively."
  (let* ((available-width (- (window-width) (length left) (length right) 2)))
    (format (format "%%%ds " available-width) " ")))

(defvar mode-line-center-space
  '(:propertize
    (:eval (simple-mode-line-render (format-mode-line mode-line-left) (format-mode-line mode-line-right)))
    face mode-line)
  "Builds center spacing.")
(put 'mode-line-center-space 'risky-local-variable t)

(setq mode-line-left
      '("%e"
	mode-line-front-space
	mode-line-client
	mode-line-modified
	" "
	mode-line-position
	" "
	mode-line-buffer-identification))

(setq mode-line-right
      '(
	(flycheck-mode flycheck-mode-line)
	" "
	mode-name
        mode-line-process
	mode-line-misc-info
	mode-line-end-spaces))

(setq-default mode-line-format
	      (append mode-line-left '(mode-line-center-space) mode-line-right))
#+END_SRC

* UI Interaction
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :straight t
  :demand t
  :bind (("M-x" . 'helm-M-x)
	 ("C-x b" . 'helm-mini)
	 ("C-x r b" . 'helm-filtered-bookmarks)
	 ("C-x C-f" . 'helm-find-files)
         ("C-c r" . 'helm-occur)
         ("C-c e" . 'helm-mark-ring)
         ("M-y" . 'helm-show-kill-ring))
  :config (progn (helm-mode 1)
                 (helm-autoresize-mode t)
		 (setq helm-M-x-fuzzy-match                  t
		       helm-bookmark-show-location           t
		       helm-buffers-fuzzy-matching           t
		       helm-completion-in-region-fuzzy-match t
		       helm-file-cache-fuzzy-match           t
		       helm-imenu-fuzzy-match                t
		       helm-mode-fuzzy-match                 t
		       helm-locate-fuzzy-match               t
		       helm-quick-update                     t
		       helm-recentf-fuzzy-match              t
		       helm-semantic-fuzzy-match             t
                       helm-etags-fuzzy-match                t
                       helm-etags-match-part-only            'all
                       helm-split-window-inside-p t)))

(use-package helm-descbinds
  :straight t
  :config (helm-descbinds-mode))
#+END_SRC

** Aggressive Indent

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :straight t
  :config
  (global-aggressive-indent-mode 1))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :straight t
  :init (setq
  	 company-idle-delay 0.1
         company-minimum-prefix-length 3)
  :config
  (global-company-mode)
  (add-to-list 'company-backends 'company-dabbrev)
  (add-to-list 'company-backends 'company-etags)
  (add-to-list 'company-frontends 'company-tng-frontend)
  (setq company-dabbrev-downcase nil))

(use-package company-quickhelp
  :straight t
  :init (setq company-quickhelp-delay 0.1)
  :config (company-quickhelp-mode))
#+END_SRC

* Packages
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :commands magit-status magit-blame
  :init
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  :config
  (setq magit-branch-arguments nil
        ;; use ido to look for branches
        magit-completing-read-function 'magit-ido-completing-read
        ;; don't put "origin-" in front of new branch names by default
        magit-default-tracking-name-function 'magit-default-tracking-name-branch-only
        magit-push-always-verify nil
        ;; Get rid of the previous advice to go into fullscreen
        magit-restore-window-configuration t)
  :bind ("C-x g" . magit-status)))
#+END_SRC

* File-type support
** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :straight t
  :mode "\\.yml\\'")
#+END_SRC

** Thrift
#+BEGIN_SRC emacs-lisp
(use-package thrift-mode
  :straight t)
#+END_SRC

* License

  My Emacs configurations written in Org mode.

  Copyright (c) 2019 Matthew Jones

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
