# very slightly tweaked from https://github.com/malob/nixpkgs/blob/2772db984cc17320360b30c77c6f6a007ecefb4f/.github/workflows/ci.yml
# changes: cachix name, remove nix-darwin specific stuff

name: Build Nix envs

on:
  pull_request:
    paths:
    - '**'
    - '!**.md'
  push:
    paths:
    - '**'
    - '!**.md'
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at midnight UTC

jobs:

  build-macos-env:
    name: Build/cache macOS Nix env
    runs-on: macos-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0

    - name: Install Nix
      uses: cachix/install-nix-action@v12
      with:
        install_url: https://github.com/numtide/nix-flakes-installer/releases/download/nix-2.4pre20210126_f15f0b8/install
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v8
      with:
        name: nuance
        extraPullNames: nix-community
        signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

    - name: If scheduled, update inputs
      if: ${{ github.event_name == 'schedule' && success() }}
      run: |
        cd home-manager
        nix flake update --recreate-lock-file

    - name: Build home-manager config
      run: |
        # Prevent conflict between Cachix installed by workflow and the one installed in the config
        nix-env --set-flag priority 1 cachix
        cd home-manager
        nix build .#github-macos-ci

    - name: Activate home-manager environment
      run: |
        cd home-manager
        HOME_MANAGER_BACKUP_EXT=backup ./result/activate

    - name: If scheduled, push commit with updated inputs
      if: ${{ github.event_name == 'schedule' && success() }}
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git commit -am "Update home-manager inputs"
        git pull --rebase origin/master
        git push

  build-macos-bootstrap-env:
    name: Build/cache macOS bootstrap env
    runs-on: macos-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0

    - name: Install Nix
      uses: cachix/install-nix-action@v12
      with:
        install_url: https://github.com/numtide/nix-flakes-installer/releases/download/nix-2.4pre20210126_f15f0b8/install
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v8
      with:
        name: nuance
        extraPullNames: nix-community
        signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

    - name: Build home-manager config
      run: |
        # Prevent conflict between Cachix installed by workflow and the one installed in the config
        nix-env --set-flag priority 1 cachix
        cd home-manager
        nix build .#macos-bootstrap

    - name: Activate home-manager environment
      run: |
        cd home-manager
        HOME_MANAGER_BACKUP_EXT=backup ./result/activate

  build-linux-env:
    name: Build/cache linux Nix env
    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0

    - name: Install Nix
      uses: cachix/install-nix-action@v12
      with:
        install_url: https://github.com/numtide/nix-flakes-installer/releases/download/nix-2.4pre20210126_f15f0b8/install
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v8
      with:
        name: nuance
        extraPullNames: nix-community
        signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

    - name: Build home-manager config
      run: |
        # Prevent conflict between Cachix installed by workflow and the one installed in the config
        nix-env --set-flag priority 1 cachix
        cd home-manager
        nix build .#github-linux-ci

    - name: Activate home-manager environment
      run: |
        cd home-manager
        HOME_MANAGER_BACKUP_EXT=backup ./result/activate

  build-nixos-env:
    name: Build/cache linux nixos env
    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
          # Nix Flakes doesn't work on shallow clones
          fetch-depth: 0

    - name: Install Nix
      uses: cachix/install-nix-action@v12
      with:
        install_url: https://github.com/numtide/nix-flakes-installer/releases/download/nix-2.4pre20210126_f15f0b8/install
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

    - name: Setup Cachix
      uses: cachix/cachix-action@v8
      with:
        name: nuance
        extraPullNames: nix-community
        signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}

    - name: If scheduled, update inputs
      if: ${{ github.event_name == 'schedule' && success() }}
      run: |
        cd nixos
        nix flake update --recreate-lock-file

    - name: Build nixos configuration
      run: |
        # Prevent conflict between Cachix installed by workflow and the one installed in the config
        nix-env --set-flag priority 1 cachix
        cd nixos
        echo '{...}: {}' > machines/dl/secrets/wifi.nix
        nix build .#nixosConfigurations.dl.config.system.build.toplevel

    - name: If scheduled, push commit with updated inputs
      if: ${{ github.event_name == 'schedule' && success() }}
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git checkout -- nixos/machines/dl/secrets
        git commit -am "Update nixos inputs"
        git pull --rebase origin/master
        git push
